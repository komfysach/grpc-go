// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package calculatorpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CalcuServiceClient is the client API for CalcuService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalcuServiceClient interface {
	// Unary
	Calcu(ctx context.Context, in *CalcuRequest, opts ...grpc.CallOption) (*CalcuResponse, error)
}

type calcuServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCalcuServiceClient(cc grpc.ClientConnInterface) CalcuServiceClient {
	return &calcuServiceClient{cc}
}

func (c *calcuServiceClient) Calcu(ctx context.Context, in *CalcuRequest, opts ...grpc.CallOption) (*CalcuResponse, error) {
	out := new(CalcuResponse)
	err := c.cc.Invoke(ctx, "/greet.CalcuService/Calcu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalcuServiceServer is the server API for CalcuService service.
// All implementations must embed UnimplementedCalcuServiceServer
// for forward compatibility
type CalcuServiceServer interface {
	// Unary
	Calcu(context.Context, *CalcuRequest) (*CalcuResponse, error)
	mustEmbedUnimplementedCalcuServiceServer()
}

// UnimplementedCalcuServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCalcuServiceServer struct {
}

func (UnimplementedCalcuServiceServer) Calcu(context.Context, *CalcuRequest) (*CalcuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Calcu not implemented")
}
func (UnimplementedCalcuServiceServer) mustEmbedUnimplementedCalcuServiceServer() {}

// UnsafeCalcuServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalcuServiceServer will
// result in compilation errors.
type UnsafeCalcuServiceServer interface {
	mustEmbedUnimplementedCalcuServiceServer()
}

func RegisterCalcuServiceServer(s grpc.ServiceRegistrar, srv CalcuServiceServer) {
	s.RegisterService(&CalcuService_ServiceDesc, srv)
}

func _CalcuService_Calcu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalcuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalcuServiceServer).Calcu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greet.CalcuService/Calcu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalcuServiceServer).Calcu(ctx, req.(*CalcuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CalcuService_ServiceDesc is the grpc.ServiceDesc for CalcuService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CalcuService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "greet.CalcuService",
	HandlerType: (*CalcuServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Calcu",
			Handler:    _CalcuService_Calcu_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calculator/calculatorpb/calcu.proto",
}
